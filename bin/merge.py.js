1 // (lambda: exec("""#!/usr/bin/env python3\n\nimport os\nimport sys\n\ndef main():\n    args = sys.argv[1:]\n\n    if len(args) < 2:\n        print('Usage: polycompiler <file1> <file2> [output-file]')\n        sys.exit(1)\n\n    file1_path = args[0]\n    file2_path = args[1]\n    output_path = args[2] if len(args) > 2 else 'out/result.py.js'\n\n    # Check if files exist\n    if not os.path.exists(file1_path) or not os.path.exists(file2_path):\n        print('Error: One or more input files do not exist.')\n        sys.exit(1)\n\n    # Get file extensions\n    ext1 = os.path.splitext(file1_path)[1].lower()\n    ext2 = os.path.splitext(file2_path)[1].lower()\n\n    # Check if one is Python and one is JavaScript\n    def is_python(ext):\n        return ext in ['.py']\n\n    def is_javascript(ext):\n        return ext in ['.js', '.cjs', '.mjs']\n\n    has_python = is_python(ext1) or is_python(ext2)\n    has_js = is_javascript(ext1) or is_javascript(ext2)\n\n    if not (has_python and has_js):\n        print(f'Merging {ext1[1:]} and {ext2[1:]} is not supported. Only Python and JavaScript files can be merged.')\n        sys.exit(1)\n\n    # Read file contents\n    with open(file1_path, 'r', encoding='utf-8') as f:\n        content1 = f.read()\n    with open(file2_path, 'r', encoding='utf-8') as f:\n        content2 = f.read()\n\n    # Determine which file is Python and which is JavaScript\n    python_content = content1 if is_python(ext1) else content2\n    js_content = content1 if is_javascript(ext1) else content2\n\n    # Call the merge function (to be defined by the user)\n    merged = merge_files(python_content, js_content)\n\n    # Ensure the output directory exists\n    output_dir = os.path.dirname(output_path)\n    if output_dir: os.makedirs(output_dir, exist_ok=True)\n\n    # Write the result to the output file\n    with open(output_path, 'w', encoding='utf-8') as f:\n        f.write(merged)\n    print(f'Merged files written to {output_path}')\n\ndef merge_files(python_content, js_content):\n    # Escape backslashes first, then newlines, then quotes\n    escaped_python_content = python_content.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n').replace('\"\"\"', '\\\\"\\\\"\\\\"')\n    escaped_js_content = js_content.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n').replace('"', '\\\\"')\n\n    return f'1 // (lambda: exec(\"\"\"{escaped_python_content}\"\"\", globals()) or 1)()\\nlambda: eval("{escaped_js_content}")'\n\nif __name__ == "__main__":\n    try:\n        main()\n    except Exception as err:\n        print('Error:', err)\n        sys.exit(1)\n""", globals()) or 1)()
lambda: eval("#!/usr/bin/env node\n\nconst fs = require('fs').promises;\nconst path = require('path');\n\nasync function main() {\n    const args = process.argv.slice(2);\n\n    if (args.length < 2) {\n        console.error('Usage: polycompiler <file1> <file2> [output-file]');\n        process.exit(1);\n    }\n\n    const file1Path = args[0];\n    const file2Path = args[1];\n    const outputPath = args[2] || 'out/result.py.js';\n\n    // Check if files exist\n    try {\n        await fs.access(file1Path);\n        await fs.access(file2Path);\n    } catch (err) {\n        console.error(`Error: One or more input files do not exist.`);\n        process.exit(1);\n    }\n\n    // Get file extensions\n    const ext1 = path.extname(file1Path).toLowerCase();\n    const ext2 = path.extname(file2Path).toLowerCase();\n\n    // Check if one is Python and one is JavaScript\n    const isPython = ext => ['.py'].includes(ext);\n    const isJavaScript = ext => ['.js', '.cjs', '.mjs'].includes(ext);\n\n    const hasPython = isPython(ext1) || isPython(ext2);\n    const hasJS = isJavaScript(ext1) || isJavaScript(ext2);\n\n    if (!(hasPython && hasJS)) {\n        console.error(`Merging ${ext1.slice(1)} and ${ext2.slice(1)} is not supported. Only Python and JavaScript files can be merged.`);\n        process.exit(1);\n    }\n\n    // Read file contents\n    const content1 = await fs.readFile(file1Path, 'utf8');\n    const content2 = await fs.readFile(file2Path, 'utf8');\n\n    // Determine which file is Python and which is JavaScript\n    const pythonContent = isPython(ext1) ? content1 : content2;\n    const jsContent = isJavaScript(ext1) ? content1 : content2;\n\n    // Call the merge function (to be defined by the user)\n    const merged = mergeFiles(pythonContent, jsContent);\n\n    // Ensure the output directory exists\n    const outputDir = path.dirname(outputPath);\n    await fs.mkdir(outputDir, { recursive: true });\n\n    // Write the result to the output file\n    await fs.writeFile(outputPath, merged);\n    console.log(`Merged files written to ${outputPath}`);\n}\n\n/**\n * Merges Python and JavaScript files\n * @param {string} pythonContent - Content of the Python file\n * @param {string} jsContent - Content of the JavaScript file\n * @returns {string} - Merged content\n */\nfunction mergeFiles(pythonContent, jsContent) {\n    // Escape backslashes first, then newlines, then quotes\n    const escapedPythonContent = pythonContent\n        .replace(/\\\\/g, '\\\\\\\\')         // Double backslashes first\n        .replace(/\\n/g, '\\\\n')          // Escape newlines\n        .replace(/\"\"\"/g, '\\\\\"\\\\\"\\\\\"');  // Escape triple quotes\n\n    // Escape backslashes first, then newlines, then quotes\n    const escapedJsContent = jsContent\n        .replace(/\\\\/g, '\\\\\\\\')         // Double backslashes first\n        .replace(/\\n/g, '\\\\n')          // Escape newlines\n        .replace(/\"/g, '\\\\\"');          // Escape double quotes\n\n    return `1 // (lambda: exec(\"\"\"${escapedPythonContent}\"\"\", globals()) or 1)()\nlambda: eval(\"${escapedJsContent}\")`;\n}\nmain().catch(err => {\n    console.error('Error:', err);\n    process.exit(1);\n});\n")